From: Sjoerd Langkemper <sjoerd@byte.nl>
Date: Fri, 24 Jul 2015 11:03:53 +0200
Subject: Add OIDCAllowUnauthenticated setting

When On, sets all environment variables and headers, but does not
require authentication if the user is not logged in.
---
 auth_openidc.conf      | 8 ++++++++
 src/config.c           | 6 ++++++
 src/mod_auth_openidc.c | 5 +++++
 src/mod_auth_openidc.h | 1 +
 4 files changed, 20 insertions(+)

diff --git a/auth_openidc.conf b/auth_openidc.conf
index bcb6efd..bd7d3d1 100644
--- a/auth_openidc.conf
+++ b/auth_openidc.conf
@@ -554,6 +554,14 @@
 #OIDCReturn401 [On|Off]
 
 # (Optional)
+# Load the session and set environment variables and headers if the user is
+# logged in, but also allow access if the user is not logged in.
+# "Off" means that the user is forced to log in to access this location.
+# "On" means that anonymous users may access this location.
+# When not defined the default "Off" is used.
+#OIDCAllowUnauthenticated [On|Off]
+
+# (Optional)
 # Specify the names of cookies to pickup from the browser and send along on backchannel
 # calls to the OP and AS endpoints. This can be used for load-balancing purposes.
 # When not defined, no such cookies are sent.
diff --git a/src/config.c b/src/config.c
index 9771e38..705e47d 100644
--- a/src/config.c
+++ b/src/config.c
@@ -1180,6 +1180,7 @@ void *oidc_create_dir_config(apr_pool_t *pool, char *path) {
 	c->cookie_path = OIDC_DEFAULT_COOKIE_PATH;
 	c->authn_header = OIDC_DEFAULT_AUTHN_HEADER;
 	c->return401 = FALSE;
+	c->allow_unauthenticated = FALSE;
 	c->pass_cookies = apr_array_make(pool, 0, sizeof(const char *));
 	c->pass_info_in_headers = 1;
 	c->pass_info_in_env_vars = 1;
@@ -1205,6 +1206,7 @@ void *oidc_merge_dir_config(apr_pool_t *pool, void *BASE, void *ADD) {
 			add->authn_header != OIDC_DEFAULT_AUTHN_HEADER ?
 					add->authn_header : base->authn_header);
 	c->return401 = (add->return401 != FALSE ? add->return401 : base->return401);
+	c->allow_unauthenticated = (add->allow_unauthenticated != FALSE ? add->allow_unauthenticated : base->allow_unauthenticated);
 	c->pass_cookies = (
 			apr_is_empty_array(add->pass_cookies) != 0 ?
 					add->pass_cookies : base->pass_cookies);
@@ -1959,6 +1961,10 @@ const command_rec oidc_config_cmds[] = {
 				(void *) APR_OFFSETOF(oidc_dir_cfg, return401),
 				RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,
 				"Indicates whether a user will be redirected to the Provider when not authenticated (Off) or a 401 will be returned (On)."),
+		AP_INIT_FLAG("OIDCAllowUnauthenticated", ap_set_flag_slot,
+				(void *) APR_OFFSETOF(oidc_dir_cfg, allow_unauthenticated),
+				RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,
+				"Allow unauthenticated users to access this location."),
 		AP_INIT_TAKE1("OIDCPassClaimsAs",
 				oidc_set_pass_claims_as, NULL,
 				RSRC_CONF|ACCESS_CONF|OR_AUTHCFG,
diff --git a/src/mod_auth_openidc.c b/src/mod_auth_openidc.c
index d2d0d34..fab9d09 100644
--- a/src/mod_auth_openidc.c
+++ b/src/mod_auth_openidc.c
@@ -2194,6 +2194,11 @@ static int oidc_check_userid_openidc(request_rec *r, oidc_cfg *c) {
 
 	oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,
 			&auth_openidc_module);
+
+	if (dir_cfg->allow_unauthenticated) {
+		return OK;
+	}
+
 	if (dir_cfg->return401)
 		return HTTP_UNAUTHORIZED;
 
diff --git a/src/mod_auth_openidc.h b/src/mod_auth_openidc.h
index 1856d76..bba4a46 100644
--- a/src/mod_auth_openidc.h
+++ b/src/mod_auth_openidc.h
@@ -317,6 +317,7 @@ typedef struct oidc_dir_cfg {
 	char *cookie;
 	char *authn_header;
 	int return401;
+	int allow_unauthenticated;
 	apr_array_header_t *pass_cookies;
 	apr_byte_t pass_info_in_headers;
 	apr_byte_t pass_info_in_env_vars;
